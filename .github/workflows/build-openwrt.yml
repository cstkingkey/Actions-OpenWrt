#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
# keep minimal runs count each day's runs rather than all runs
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      clean:
        description: 'Clean Cache'
        required: false
        default: 'false'
      new:
        description: 'build it regardless of cache'
        required: false
        default: 'false'
  push:
    branches:
      - main
    paths:
      - 'open_newifi3.config'
      - 'open_r66s.config'

env:
  REPO_URL_lean: https://github.com/coolsnowwolf/lede.git
  REPO_URL_immortal: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  DELETE_OLD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        conf: [newifi3, r66s]
        repo: [lean]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: Clone source code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        repo=${{ matrix.repo }}
        repo_url=REPO_URL_$repo
        repo_url=${!repo_url}
        git clone $repo_url -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Get Commit Hash
      id: getHash
      run: |
        hash_action=`md5sum .github/workflows/build-openwrt.yml | awk '{print $1}'`
        conf=${{ matrix.conf }}
        CONFIG_FILE=open_${conf}.config
        hash_conf=`md5sum ${CONFIG_FILE} | awk '{print $1}'`
        cd openwrt
        hash_repo=$(git rev-parse HEAD)
        cd ..
        hash=${hash_repo}_${hash_action}_${hash_conf}
        commitHash=`echo $hash | md5sum | awk '{print $1}'`
        echo "commitHash=${commitHash}" >> $GITHUB_OUTPUT

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@main
      with:
        path: .commitHash
        key: ${{ matrix.conf }}-${{ matrix.repo }}-${{ steps.getHash.outputs.commitHash }}

    - name: Trigger build
      id: triggerBuild
      if: steps.cacheHash.outputs.cache-hit != 'true' || github.event.inputs.new == 'true'
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python3-pyelftools python3-setuptools python2.7 unzip zlib1g-dev subversion flex uglifyjs git-core gcc p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++ antlr3 gperf wget curl swig rsync ccache
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Cache
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        clean: ${{ github.event.inputs.clean }}
        mixkey: ${{ matrix.conf }}-${{ matrix.repo }}

    - name: Check space usage before
      if: (!cancelled())
      run: df -hT

    - name: Load custom feeds
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      run: |
        [ -e files ] && mv files openwrt/files
        conf=${{ matrix.conf }}
        CONFIG_FILE=open_${conf}.config
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      if: steps.triggerBuild.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "status=success" >> $GITHUB_OUTPUT
    
    - name: Compile the firmware
      id: compile
      if: steps.package.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        echo -e "$((`nproc`+1)) thread compile"
        make -j$((`nproc`+1)) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        package_name=openwrt_packages${{ env.DEVICE_NAME }}.tar.xz
        tar -cJf ${package_name} openwrt/bin/packages/
        echo "PACKAGES=$PWD/${package_name}" >> $GITHUB_ENV
        cd openwrt/bin/targets/*/*
        rm -rf packages
        buildinfo_name=openwrt_buildinfo${{ env.DEVICE_NAME }}.tar.xz
        tar -cJf ${buildinfo_name} --remove-files config.buildinfo feeds.buildinfo profiles.json sha256sums version.buildinfo *.manifest
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        repo=${{ matrix.repo }}
        echo "release_tag=$(date +"%Y.%m.%d")-$repo" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*
          ${{ env.PACKAGES }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && env.DELETE_OLD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
